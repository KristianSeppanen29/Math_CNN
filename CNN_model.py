import tensorflow as tf
import tensorflowjs as tfjs
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

print(f"TensorFlow version: {tf.__version__}")
print(f"TensorFlowJS version: {tfjs.__version__}")
print(f"Keras version: {keras.__version__}")

# Load the data
(train_img, train_label), (test_img, test_label) = keras.datasets.mnist.load_data()
train_img = train_img.reshape([-1, 28, 28, 1])
test_img = test_img.reshape([-1, 28, 28, 1])
train_img = train_img/255.0
test_img = test_img/255.0
train_label = keras.utils.to_categorical(train_label)
test_label = keras.utils.to_categorical(test_label)

# Define the model architecture
model = keras.Sequential([
    keras.layers.Conv2D(32, (5, 5), padding="same", input_shape=[28, 28, 1]),
    keras.layers.MaxPool2D((2,2)),
    keras.layers.Conv2D(64, (5, 5), padding="same"),
    keras.layers.MaxPool2D((2,2)),
    keras.layers.Flatten(),
    keras.layers.Dense(1024, activation='relu'),
    keras.layers.Dropout(0.2),
    keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

print("Model architecture created successfully!")
model.summary()

# Train the model
print("Starting training...")
history = model.fit(train_img, train_label, 
                   validation_data=(test_img, test_label), 
                   epochs=10, 
                   verbose=1)

# Evaluate the model
test_loss, test_acc = model.evaluate(test_img, test_label, verbose=0)
print(f'Test accuracy: {test_acc:.4f}')

# Save model as tfjs format
print("Converting to TensorFlow.js format...")
tfjs.converters.save_keras_model(model, 'models')
print("Model saved to 'models' directory")

# Verify the model.json content
import json
import os

if os.path.exists('models/model.json'):
    with open('models/model.json', 'r') as f:
        model_json = json.load(f)
    
    print("\n" + "="*50)
    print("MODEL METADATA VERIFICATION")
    print("="*50)
    print(f"Format: {model_json.get('format', 'N/A')}")
    print(f"Generated by: {model_json.get('generatedBy', 'N/A')}")
    print(f"Converted by: {model_json.get('convertedBy', 'N/A')}")
    
    if 'modelTopology' in model_json:
        print(f"Keras version: {model_json['modelTopology'].get('keras_version', 'N/A')}")
    
    print("="*50)
    
    # Show first few lines of model topology
    print("\nFirst part of model topology:")
    print(json.dumps(model_json, indent=2)[:500] + "...")
else:
    print("Error: model.json file not found!")

# Plot training history
plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.savefig('training_results.png', dpi=150, bbox_inches='tight')
plt.show()

print("\nTraining complete! Check the 'models' directory for TensorFlow.js files.")
